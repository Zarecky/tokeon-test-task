// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users_gen.sql

package users

import (
	"context"
	. "tokeon-test-task/internal/models"
	"time"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO users (id, username, created_at)
	VALUES ($1, $2, now())
	RETURNING id, username, created_at, updated_at, deleted_at
`

type CreateParams struct {
	ID       uuid.UUID `db:"id" json:"id"`
	Username string    `db:"username" json:"username"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*User, error) {
	row := q.db.QueryRow(ctx, create, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const get = `-- name: Get :one
SELECT id, username, created_at, updated_at, deleted_at FROM users WHERE id=$1 LIMIT 1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}

const update = `-- name: Update :one
UPDATE users
	SET username=$1, updated_at=now(), deleted_at=$2
	WHERE id=$3
	RETURNING id, username, created_at, updated_at, deleted_at
`

type UpdateParams struct {
	Username  string     `db:"username" json:"username"`
	DeletedAt *time.Time `db:"deleted_at" json:"deleted_at"`
	ID        uuid.UUID  `db:"id" json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*User, error) {
	row := q.db.QueryRow(ctx, update, arg.Username, arg.DeletedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return &i, err
}
